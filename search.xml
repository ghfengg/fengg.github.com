<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CPU/LOAD过高如何排查</title>
    <url>/2021/02/20/CPU-LOAD%E8%BF%87%E9%AB%98%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<p>线上排查问题</p>
<a id="more"></a>


<h2 id="先通过TOP命令，找到CPU较高的进程，获取进程ID-PID"><a href="#先通过TOP命令，找到CPU较高的进程，获取进程ID-PID" class="headerlink" title="先通过TOP命令，找到CPU较高的进程，获取进程ID(PID)"></a>先通过TOP命令，找到CPU较高的进程，获取进程ID(PID)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>
<h2 id="切换到线程视图"><a href="#切换到线程视图" class="headerlink" title="切换到线程视图"></a>切换到线程视图</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -mp $&#123;pid&#125; -o THREAD,tid,time</span><br></pre></td></tr></table></figure>
<p>找到消耗CPU最多，最占CPU的线程,获取线程ID(TID)</p>
<h2 id="将TID转成16进制格式"><a href="#将TID转成16进制格式" class="headerlink" title="将TID转成16进制格式"></a>将TID转成16进制格式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">printf <span class="string">&quot;%x\n&quot;</span> tid</span><br></pre></td></tr></table></figure>
<h2 id="通过jstack分析"><a href="#通过jstack分析" class="headerlink" title="通过jstack分析"></a>通过jstack分析</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jstack $&#123;pid&#125; |grep $&#123;tid&#125; -A 30</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>线上问题排查</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo个性化配置</title>
    <url>/2021/02/20/Hexo%E4%B8%80%E4%BA%9B%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Hexo个性优化</p>
<a id="more"></a>

<h2 id="【参考资料】"><a href="#【参考资料】" class="headerlink" title="【参考资料】"></a>【参考资料】</h2><ol>
<li><a href="https://victoryofymk.github.io/2018/10/23/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96next%E4%B8%BB%E9%A2%98/">https://victoryofymk.github.io/2018/10/23/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96next%E4%B8%BB%E9%A2%98/</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/60424755">https://zhuanlan.zhihu.com/p/60424755</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>NodeJS初探</title>
    <url>/2021/02/20/NodeJS%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>NodeJs通过实践轮询机制处理耗时较长的请求</p>
<a id="more"></a>

<h3 id="NodeJS事件驱动机制"><a href="#NodeJS事件驱动机制" class="headerlink" title="NodeJS事件驱动机制"></a>NodeJS事件驱动机制</h3><ol>
<li>Apache通过采取多线程方式处理多请求</li>
<li>Nginx和NodeJS都是单线程，实践驱动机制</li>
<li>多线程或者是多进程会带来内存的严重消耗</li>
</ol>
<h3 id="NodeJS如何通过单线程实现多请求处理"><a href="#NodeJS如何通过单线程实现多请求处理" class="headerlink" title="NodeJS如何通过单线程实现多请求处理"></a>NodeJS如何通过单线程实现多请求处理</h3><p>just use callbacks when you are doing I/O</p>
<p>NodeJS 依赖一个事件库Libev来实现事件的轮询</p>
<h3 id="关于NodeJS单线程多说两句"><a href="#关于NodeJS单线程多说两句" class="headerlink" title="关于NodeJS单线程多说两句"></a>关于NodeJS单线程多说两句</h3><p>NodeJS的单线程指的是NodeJS本身不提供创建线程的能力，但是NodeJS运行时环境是多线程的，它会维护一个执行队列，循环检测，调度JavaScript线程来执行</p>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
  </entry>
  <entry>
    <title>一致性hash算法</title>
    <url>/2021/02/20/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>介绍一致性HASH算法原理及其应用场景</p>
<a id="more"></a>

<h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>一致性哈希算法在1997年由麻省理工学院提出的一种分布式哈希（DHT）实现算法，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷和CARP十分类似。一致性哈希修正了CARP使用的简单哈希算法带来的问题，使得分布式哈希（DHT）可以在P2P环境中真正得到应用</p>
<h3 id="一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义"><a href="#一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义" class="headerlink" title="一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义"></a>一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义</h3><ol>
<li>平衡性(Balance)：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用，很多哈希算法都能够满足这一条件</li>
<li>单调性(Monotonicity)：单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中，哈希的结果应能够保证原有已分配的内容可以被映射到原有的或者新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区</li>
<li>分散性(Spread)：在分布式环境中，终端有可能看不到所有的缓冲，而是只能看到其中的一部分。当终端希望通过哈希过程将内容映射到缓冲上时，由于不同终端所见的缓冲范围有可能不同，从而导致哈希的结果不一致，最终的结果是相同的内容被不同的终端映射到不同的缓冲区中。这种情况显然是应该避免的，因为它导致相同内容被存储到不同缓冲中去，降低了系统存储的效率。分散性的定义就是上述情况发生的严重程度。好的哈希算法应能够尽量避免不一致的情况发生，也就是尽量降低分散性</li>
<li>负载(Load)：负载问题实际上是从另一个角度看待分散性问题。既然不同的终端可能将相同的内容映射到不同的缓冲区中，那么对于一个特定的缓冲区而言，也可能被不同的用户映射为不同 的内容。与分散性一样，这种情况也是应当避免的，因此好的哈希算法应能够尽量降低缓冲的负荷</li>
</ol>
<blockquote>
<p>在分布式集群中，对机器的添加删除，或者机器故障后自动脱离集群这些操作是分布式集群管理最基本的功能。如果采用常用的hash(object)%N算法，那么在有机器添加或者删除后，很多原有的数据就无法找到了，这样严重的违反了单调性原则。</p>
</blockquote>
<p>接下来主要讲解一下一致性哈希算法是如何设计的</p>
<h3 id="环形HASH空间"><a href="#环形HASH空间" class="headerlink" title="环形HASH空间"></a>环形HASH空间</h3><p>按照常用的hash算法来将对应的key哈希到一个具有2^32次方个桶的空间中，即0~(2^32)-1的数字空间中。现在我们可以将这些数字头尾相连，想象成一个闭合的环形。如下图把数据通过一定的hash算法处理后映射到环上</p>
<p><img src="/images/hash1.jpg"></p>
<p>现在我们将object1、object2、object3、object4四个对象通过特定的Hash函数计算出对应的key值，然后散列到Hash环上。如下图:<br><br>Hash(object1) = key1；<br><br>Hash(object2) = key2；<br><br>Hash(object3) = key3；<br><br>Hash(object4) = key4；<br><br><img src="/images/hash2.jpg"></p>
<h3 id="将机器通过hash算法映射到环上"><a href="#将机器通过hash算法映射到环上" class="headerlink" title="将机器通过hash算法映射到环上"></a>将机器通过hash算法映射到环上</h3><p>在采用一致性哈希算法的分布式集群中将新的机器加入，其原理是通过使用与对象存储一样的Hash算法将机器也映射到环中（一般情况下对机器的hash计算是采用机器的IP或者机器唯一的别名作为输入值），然后以顺时针的方向计算，<strong>将所有对象存储到离自己最近的机器中</strong>。<br>假设现在有NODE1，NODE2，NODE3三台机器，通过Hash算法得到对应的KEY值，映射到环中，其示意图如下：<br><br>Hash(NODE1) = KEY1;<br><br>Hash(NODE2) = KEY2;<br><br>Hash(NODE3) = KEY3;<br><br><img src="/images/hash3.jpg"></p>
<p>通过上图可以看出对象与机器处于同一哈希空间中，这样按顺时针转动object1存储到了NODE1中，object3存储到了NODE2中，object2、object4存储到了NODE3中。在这样的部署环境中，hash环是不会变更的，因此，通过算出对象的hash值就能快速的定位到对应的机器中，这样就能找到对象真正的存储位置了。</p>
<h3 id="机器的删除与添加"><a href="#机器的删除与添加" class="headerlink" title="机器的删除与添加"></a>机器的删除与添加</h3><p>普通hash求余算法最为不妥的地方就是在有机器的添加或者删除之后会照成大量的对象存储位置失效，这样就大大的不满足单调性了。下面来分析一下一致性哈希算法是如何处理的。</p>
<h4 id="节点（机器）的删除"><a href="#节点（机器）的删除" class="headerlink" title="节点（机器）的删除"></a>节点（机器）的删除</h4><p>以上面的分布为例，如果NODE2出现故障被删除了，那么按照顺时针迁移的方法，object3将会被迁移到NODE3中，这样仅仅是object3的映射位置发生了变化，其它的对象没有任何的改动。如下图</p>
<p><img src="/images/hash4.jpg"></p>
<h4 id="节点（机器）的添加"><a href="#节点（机器）的添加" class="headerlink" title="节点（机器）的添加"></a>节点（机器）的添加</h4><p>如果往集群中添加一个新的节点NODE4，通过对应的哈希算法得到KEY4，并映射到环中，如下图<br><img src="/images/hash5.jpg"></p>
<p>通过按顺时针迁移的规则，那么object2被迁移到了NODE4中，其它对象还保持这原有的存储位置。通过对节点的添加和删除的分析，一致性哈希算法在保持了单调性的同时，还是数据的迁移达到了最小，这样的算法对分布式集群来说是非常合适的，避免了大量数据迁移，减小了服务器的的压力</p>
<h3 id="平衡性"><a href="#平衡性" class="headerlink" title="平衡性"></a>平衡性</h3><blockquote>
<p>根据上面的图解分析，一致性哈希算法满足了单调性和负载均衡的特性以及一般hash算法的分散性，但这还并不能当做其被广泛应用的原由，因为还缺少了平衡性。下面将分析一致性哈希算法是如何满足平衡性的</p>
</blockquote>
<p>hash算法是不保证平衡的，如上面只部署了NODE1和NODE3的情况（NODE2被删除的图），object1存储到了NODE1中，而object2、object3、object4都存储到了NODE3中，这样就照成了非常不平衡的状态。在一致性哈希算法中，为了尽可能的满足平衡性，其引入了虚拟节点</p>
<blockquote>
<p>“虚拟节点”（ virtual node ）是实际节点（机器）在 hash 空间的复制品（ replica ），一实际个节点（机器）对应了若干个“虚拟节点”，这个对应个数也成为“复制个数”，“虚拟节点”在 hash 空间中以hash值排列</p>
</blockquote>
<p>以上面只部署了NODE1和NODE3的情况（NODE2被删除的图）为例，之前的对象在机器上的分布很不均衡，现在我们以2个副本（复制个数）为例，这样整个hash环中就存在了4个虚拟节点，最后对象映射的关系图如下:</p>
<p><img src="/images/hash6.jpg"></p>
<p>根据上图可知对象的映射关系：object1-&gt;NODE1-1，object2-&gt;NODE1-2，object3-&gt;NODE3-2，object4-&gt;NODE3-1。通过虚拟节点的引入，对象的分布就比较均衡了。那么在实际操作中，正真的对象查询是如何工作的呢？对象从hash到虚拟节点到实际节点的转换如下图</p>
<p><img src="/images/hash7.jpg"></p>
<p>“虚拟节点”的hash计算可以采用对应节点的IP地址加数字后缀的方式。</p>
<p>例如假设NODE1的IP地址为192.168.1.100</p>
<p>引入“虚拟节点”前，计算 cache A 的 hash 值：Hash(“192.168.1.100”)</p>
<p>引入“虚拟节点”后，计算“虚拟节”点NODE1-1和NODE1-2的hash值：<br>Hash(“192.168.1.100#1”); // NODE1-1<br><br>Hash(“192.168.1.100#2”); // NODE1-2</p>
]]></content>
      <categories>
        <category>一致性hash</category>
      </categories>
  </entry>
</search>
