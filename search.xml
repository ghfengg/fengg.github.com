<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一致性hash算法</title>
      <link href="2021/02/20/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95/"/>
      <url>2021/02/20/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>介绍一致性HASH算法原理及其应用场景</p><a id="more"></a><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>一致性哈希算法在1997年由麻省理工学院提出的一种分布式哈希（DHT）实现算法，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷和CARP十分类似。一致性哈希修正了CARP使用的简 单哈希算法带来的问题，使得分布式哈希（DHT）可以在P2P环境中真正得到应用</p><h3 id="一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义"><a href="#一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义" class="headerlink" title="一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义"></a>一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义</h3><ol><li>平衡性(Balance)：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用，很多哈希算法都能够满足这一条件</li><li>单调性(Monotonicity)：单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中，哈希的结果应能够保证原有已分配的内容可以被映射到原有的或者新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区</li><li>分散性(Spread)：在分布式环境中，终端有可能看不到所有的缓冲，而是只能看到其中的一部分。当终端希望通过哈希过程将内容映射到缓冲上时，由于不同终端所见的缓冲范围有可能不同，从而导致哈希的结果不一致，最终的结果是相同的内容被不同的终端映射到不同的缓冲区中。这种情况显然是应该避免的，因为它导致相同内容被存储到不同缓冲中去，降低了系统存储的效率。分散性的定义就是上述情况发生的严重程度。好的哈希算法应能够尽量避免不一致的情况发生，也就是尽量降低分散性</li><li>负载(Load)：负载问题实际上是从另一个角度看待分散性问题。既然不同的终端可能将相同的内容映射到不同的缓冲区中，那么对于一个特定的缓冲区而言，也可能被不同的用户映射为不同 的内容。与分散性一样，这种情况也是应当避免的，因此好的哈希算法应能够尽量降低缓冲的负荷</li></ol><blockquote><p>在分布式集群中，对机器的添加删除，或者机器故障后自动脱离集群这些操作是分布式集群管理最基本的功能。如果采用常用的hash(object)%N算法，那么在有机器添加或者删除后，很多原有的数据就无法找到了，这样严重的违反了单调性原则。接下来主要讲解一下一致性哈希算法是如何设计的：</p></blockquote><h3 id="环形HASH空间"><a href="#环形HASH空间" class="headerlink" title="环形HASH空间"></a>环形HASH空间</h3><p>按照常用的hash算法来将对应的key哈希到一个具有2^32次方个桶的空间中，即0~(2^32)-1的数字空间中。现在我们可以将这些数字头尾相连，想象成一个闭合的环形。如下图<br><img src="hash_1.jpg"><br>把数据通过一定的hash算法处理后映射到环上</p>]]></content>
      
      
      <categories>
          
          <category> 一致性hash </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CPU/LOAD过高如何排查</title>
      <link href="2021/02/20/CPU-LOAD%E8%BF%87%E9%AB%98%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5/"/>
      <url>2021/02/20/CPU-LOAD%E8%BF%87%E9%AB%98%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="先通过TOP命令，找到CPU较高的进程，获取进程ID-PID"><a href="#先通过TOP命令，找到CPU较高的进程，获取进程ID-PID" class="headerlink" title="先通过TOP命令，找到CPU较高的进程，获取进程ID(PID)"></a>先通过TOP命令，找到CPU较高的进程，获取进程ID(PID)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><h2 id="切换到线程视图"><a href="#切换到线程视图" class="headerlink" title="切换到线程视图"></a>切换到线程视图</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -mp $&#123;pid&#125; -o THREAD,tid,time</span><br></pre></td></tr></table></figure><p>找到消耗CPU最多，最占CPU的线程,获取线程ID(TID)</p><h2 id="将TID转成16进制格式"><a href="#将TID转成16进制格式" class="headerlink" title="将TID转成16进制格式"></a>将TID转成16进制格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf <span class="string">&quot;%x\n&quot;</span> tid</span><br></pre></td></tr></table></figure><h2 id="通过jstack分析"><a href="#通过jstack分析" class="headerlink" title="通过jstack分析"></a>通过jstack分析</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack $&#123;pid&#125; |grep $&#123;tid&#125; -A 30</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 线上问题排查 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs初探</title>
      <link href="2021/02/20/NodeJs%E5%88%9D%E6%8E%A2/"/>
      <url>2021/02/20/NodeJs%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<p>NodeJs通过实践轮询机制处理耗时较长的请求</p><a id="more"></a><h3 id="NodeJs的事件驱动机制"><a href="#NodeJs的事件驱动机制" class="headerlink" title="NodeJs的事件驱动机制"></a>NodeJs的事件驱动机制</h3><p>NodeJs通过实践轮询机制处理耗时较长的请求</p><ul><li>Apache通过采取多线程方式处理多请求</li><li>Nginx和NodeJS都是单线程，实践驱动机制</li><li>多线程或者是多进程会带来内存的严重消耗</li></ul><h3 id="NodeJS如何通过单线程实现多请求处理"><a href="#NodeJS如何通过单线程实现多请求处理" class="headerlink" title="NodeJS如何通过单线程实现多请求处理"></a>NodeJS如何通过单线程实现多请求处理</h3><p>just use callbacks when you are doing I/O</p><p>NodeJS 依赖一个事件库Libev来实现事件的轮询</p><h3 id="关于NodeJS单线程多说两句"><a href="#关于NodeJS单线程多说两句" class="headerlink" title="关于NodeJS单线程多说两句"></a>关于NodeJS单线程多说两句</h3><p>NodeJS的单线程指的是NodeJS本身不提供创建线程的能力，但是NodeJS运行时环境是多线程的，它会维护一个执行队列，循环检测，调度JavaScript线程来执行</p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo个性化配置</title>
      <link href="2021/02/20/Hexo%E4%B8%80%E4%BA%9B%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
      <url>2021/02/20/Hexo%E4%B8%80%E4%BA%9B%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Hexo个性优化</p><a id="more"></a><h2 id="【参考资料】"><a href="#【参考资料】" class="headerlink" title="【参考资料】"></a>【参考资料】</h2><ol><li><a href="https://victoryofymk.github.io/2018/10/23/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96next%E4%B8%BB%E9%A2%98/">https://victoryofymk.github.io/2018/10/23/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96next%E4%B8%BB%E9%A2%98/</a></li><li><a href="https://zhuanlan.zhihu.com/p/60424755">https://zhuanlan.zhihu.com/p/60424755</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
